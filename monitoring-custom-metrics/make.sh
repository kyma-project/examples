#!/usr/bin/env bash

declare CONTAINER_PATH
declare GOAL

set -e

function usage {
    echo "usage:"
    echo "$0 [options]"
    echo "Run make inside a container with the current directory/given path mounted as working directory."
    echo "  -p --path    Specify a relative path from the current directory or an absolute path to mount into the container."
    echo "  -g --goal    Specify a goal to run. Supported goals are:"
    echo "               all:         (default) Execute all goals except for ci."
    echo "               ci:          Execute all goals except for format. Generates a test report."
    echo "               format:      Execute the code formatting tool for the project."
    echo "               resolve:     Resolve all dependencies using the dependency manager."
    echo "               validate:    Lint the code."
    echo "               scan:        Run security and IP scan on all dependencies."
    echo "               build:       Build the project."
    echo "               test:        Run unit tests."
    echo "               test-report: Run unit tests and generate a test report."
    echo "               clean:       Delete all the files generated by any other goal"
} 

while getopts "p:g:h" opt; do
    case ${opt} in
        p)
            CONTAINER_PATH=$OPTARG
            ;;
        g)
            GOAL=$OPTARG
            ;;
        h)
            usage
            exit 0
            ;;
        *)
            usage
            exit 1
    esac
done

HOST_PATH=$CONTAINER_PATH
# either relative path provided or no path, need to calculate
if [[ -z $CONTAINER_PATH ]] || [[ ! $CONTAINER_PATH == /* ]]; then
    HOST_PATH=$(pwd)"/"$CONTAINER_PATH
    set +e
    CONTAINER_PATH="/src/"$(echo $HOST_PATH | grep -E github.com\.\* -o)
    if [[ $? != 0 ]]; then 
        echo "$HOST_PATH is not a Kyma Project."
        exit 1
    fi
    set -e
fi

# no goal given
if [[ -z $GOAL ]]; then
    GOAL='all'
fi

# check env vars
if [[ ! -z $buildpath ]]; then
    ENV+="-e buildpath "
fi
if [[ ! -z $SRCCLR_API_TOKEN ]]; then
    ENV+="-e SRCCLR_API_TOKEN "
fi

# Run in the buildpack container
echo "ðŸš€ Running make $GOAL on $CONTAINER_PATH:"
echo "GOAL: ${GOAL}"
docker run --rm -v $HOST_PATH:/go$CONTAINER_PATH -w /go$CONTAINER_PATH $ENV eu.gcr.io/kyma-project/golang-buildpack:0.0.8 /bin/bash -c "make $GOAL"